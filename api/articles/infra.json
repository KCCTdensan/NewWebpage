{"data":[{"slug":"rpi-busitsu","title":"ラズパイ部室モニタについて","noRobots":true,"date":"2022-03-13T00:00:00.000Z","body":"<h1 id=\"ラズパイ部室モニタについて\">ラズパイ部室モニタについて</h1>\n<p>リポジトリ : <a href=\"https://github.com/KCCTdensan/busitsu\">https://github.com/KCCTdensan/busitsu</a></p>\n<h2 id=\"仕様\">仕様</h2>\n<p>温度，湿度を測る．</p>\n<p>Prometheusのexporterっぽいやつを実装してる．</p>\n<p>現状，rpi 4B<code>192.168.100.150(hiroshi)</code>で動作中．</p>\n<h2 id=\"裏仕様\">(裏)仕様</h2>\n<p>誰か直してください．</p>\n<ul>\n<li>ファイル(シリアル)を読むスレッドが落ちても何もしない為，センサが抜き差しされるごとに(プロセスの)再起動が必要</li>\n<li>フルのvibe-dに依存してしまっている為ビルドが重い(4Bでも重い)</li>\n</ul>\n<h2 id=\"インストール\">インストール</h2>\n<pre><code># apt-get update\n# apt-get install -y runit runit-run git ldc dub\n# apt-get install -y build-essential zlib1g-dev libssl-dev # vibe-d\n# git clone https://github.com/KCCTdensan/busitsu /opt/busitsu\n# cd /opt/busitsu/rpi\n# dub build -b release # クッソ時間がかかる\n# mkdir -p /etc/sv/busitsu\n# touch /etc/sv/busitsu/run\n# chmod +x /etc/sv/busitsu/run\n</code></pre>\n<p><code>/etc/sv/busitsu/run</code>を以下のようにする．</p>\n<pre><code>#!/usr/bin/env sh\nexec /opt/busitsu/rpi/busitsu\n</code></pre>\n<p>また，<code>/opt/busitsu/rpi/source/busitsu/app.d</code>の<code>/dev/ttyUSB0</code>を適当なパスに修正する．\n(当然，編集後にはビルドが必要)</p>\n<p>最後にサービスを有効化・起動させる．</p>\n<pre><code># ln -s /etc/sv/busitsu /etc/service/busitsu\n</code></pre>\n<h2 id=\"prometheusの設定\">Prometheusの設定</h2>\n<p><code>prometheus.yml</code>の<code>scrape_configs:</code>に以下を追記する．</p>\n<pre><code>  - job_name: &#39;busitsu&#39;\n    static_configs:\n    - targets: [&#39;hiroshi.d3bu.net:8080&#39;]\n</code></pre>\n<p>サービスをreloadすれば完成．</p>\n<h2 id=\"おまけ-grafanaの設定\">(おまけ) Grafanaの設定</h2>\n<p><code>busitsu_temp{}</code>と<code>busitsu_humid{}</code>を使う．</p>\n","authors":[]},{"slug":"postgresql","noRobots":true,"date":1640677807960,"dateUpd":1640679029558,"body":"<h1 id=\"ポスグレの設定\">ポスグレの設定</h1>\n<p>メモ程度．\ndebian bullseye, pgdb v13を想定</p>\n<h2 id=\"リポジトリ\">リポジトリ</h2>\n<p>debian公式リポジトリのパッケージは枯れすぎている．\nプロジェクトのリポジトリを使う．</p>\n<pre><code class=\"language-bash\">$ curl -L https://www.postgresql.org/media/keys/ACCC4CF8.asc | doas gpg --dearmor -o /usr/share/keyrings/postgr\nesql.gpg\n</code></pre>\n<p>そしたら<code>/etc/apt/sources.list.d/postgresql.list</code>の内容を以下のようにする．</p>\n<pre><code>deb [signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt bullseye-pgdg main\n</code></pre>\n<p>以下を忘れないように実行．</p>\n<pre><code class=\"language-bash\">$ sudo apt update\n</code></pre>\n<h2 id=\"インストール\">インストール</h2>\n<pre><code class=\"language-bash\">$ sudo apt install postgresql postgresql-common\n</code></pre>\n<h2 id=\"設定\">設定</h2>\n<p><a href=\"https://pgtune.leopard.in.ua\">PGTune</a>を使う．\n生成したものを設定ファイルの末尾に追加する．</p>\n<h2 id=\"権限とか\">権限とか</h2>\n<p>デフォルトではパスワードで接続できない．</p>\n<pre><code class=\"language-diff\">- local all all peer\n+ local all all md5\n\n- local replication all peer\n+ local replication all md5\n</code></pre>\n<h2 id=\"いざ接続\">いざ接続</h2>\n<p>する前にロールを作成する．</p>\n<pre><code class=\"language-bash\">$ sudo -u postgres psql\n</code></pre>\n<p>デフォルト設定だと<code>postgres</code>に関してはpeer認証なのでパスワードは聞かれない．</p>\n<pre><code class=\"language-sql\">&gt; CREATE ROLE hoge WITH LOGIN PASSWORD &#39;hogepass&#39;;\n</code></pre>\n<p>以上．</p>\n<h2 id=\"はじめてのdb\">はじめてのDB</h2>\n<p><code>ADMIN</code>のあるロールで操作(さっきの<code>postgres</code>で大丈夫)</p>\n<pre><code class=\"language-sql\">&gt; CREATE DATABASE hogedb WITH OWNER hoge;\n</code></pre>\n<p>hogeはhogedbの中では好き勝手ができる．</p>\n","authors":[]},{"slug":"prom-pgdb","title":"Prometheusとポスグレの連携","noRobots":true,"date":1640675707270,"dateUpd":1640688562233,"body":"<h1 id=\"prometheusとポスグレの連携\">Prometheusとポスグレの連携</h1>\n<h2 id=\"promscale\">promscale</h2>\n<p><a href=\"https://github.com/timescale/promscale\">https://github.com/timescale/promscale</a></p>\n<p>prometheusとgrafanaの間に入ってくれる(grafana側からは普通のprometheusとして使える)．\ndebをgithubのリリースページから落とす．</p>\n<p><code>promscale.conf</code>をこうする．</p>\n<pre><code>PROMSCALE_DB_HOST=&quot;localhost&quot;\nPROMSCALE_DB_NAME=&quot;prometheus&quot;\nPROMSCALE_DB_PASSWORD=&quot;hogehoge&quot;\nPROMSCALE_DB_PORT=&quot;5432&quot;\nPROMSCALE_DB_SSL_MODE=&quot;allow&quot;\nPROMSCALE_DB_USER=&quot;prometheus&quot;\n</code></pre>\n<p>また，<code>prometheus.yml</code>に以下を追記する．</p>\n<pre><code class=\"language-yaml\"># Promscale\nremote_write:\n  - url: &quot;http://localhost:9201/write&quot;\n    remote_timeout: 30s\n    queue_config:\n      capacity: 10000\n      max_samples_per_send: 3000\n      batch_send_deadline: 10s\n      min_shards: 4\n      max_shards: 200\n      min_backoff: 100ms\n      max_backoff: 10s\nremote_read:\n  - url: &quot;http://localhost:9201/read&quot;\n    read_recent: true\n</code></pre>\n<h2 id=\"pgdbv13を想定に拡張を入れる\">pgdb(v13を想定)に拡張を入れる</h2>\n<p>以下を<code>/etc/apt/sources.list.d/timescale.list</code>に書く．</p>\n<pre><code>deb [signed-by=/usr/share/keyrings/timescale.gpg] https://packagecloud.io/timescale/timescaledb/debian/ bullseye main\n</code></pre>\n<p>以下を実行 :</p>\n<pre><code class=\"language-bash\">$ curl -L https://packagecloud.io/timescale/timescaledb/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/timescale.gpg\n$ sudo apt update\n$ sudo apt install timescaledb-2-postgresql-13\n</code></pre>\n<p>postgresql.confの</p>\n<pre><code>#shared_preload_libraries = &#39;&#39;  # (change requires restart)\n</code></pre>\n<p>の行を</p>\n<pre><code>shared_preload_libraries = &#39;timescaledb&#39;        # (change requires restart)\n</code></pre>\n<p>とする．\nポスグレをrestartしてから対象のDBを作り，</p>\n<pre><code class=\"language-sql\">&gt; CREATE EXTENSION IF NOT EXISTS timescaledb;\n</code></pre>\n<p>する．\nそれっぽいのが出る．</p>\n<h2 id=\"もう一度ポスグレをいじる\">もう一度ポスグレをいじる</h2>\n<p>promscaleも開始前に一応migrate用のSQL走らせてくれるのだが，create roleしようとしやがる．<!-- ふざけんな --></p>\n<p>まあ動かなけりゃ話にならないのでしゃーなしの権限付与．</p>\n<pre><code class=\"language-sql\">&gt; ALTER ROLE prometheus WITH CREATEROLE;\n</code></pre>\n<h2 id=\"いけた\">いけた</h2>\n<p>いけた</p>\n<h2 id=\"extensionの更新\">Extensionの更新</h2>\n<p>たまに怒られる．</p>\n<pre><code>% doas -u postgres psql -x -d prometheus\n&gt; ALTER EXTENSION timescaledb UPDATE;\n</code></pre>\n<p>これでヨシ!</p>\n<h2 id=\"サービスが何故か起動しない\">サービスが何故か起動しない</h2>\n<p>引数も環境変数もユーザーも問題無いのに何故かsystemdのサービスでは起動できない場合がある(かもしれない)．</p>\n<pre><code>% PROMSCALE_DB_HOST=&quot;localhost&quot; PROM... promscale &amp; \n</code></pre>\n<p>とすると起動できる．</p>\n<!--\n### いけなかった: promscaleのmigrate\n\n明らかに引数がまずい．\n対症療法でやったけどまあ動けばいいでしょ(しかし動かない)．\nバイナリはgithubのリリースページから落としてきた．\n\n```bash\n$ ./prom-migrator --start=0 --reader-url=http://localhost:9201/read --writer-url=http://localhost:9201/write --progress-enabled=false\n```\n\nそれでも動かん．\n\nやった後に気付いたが，これ現状動いてるやつをmigradteするやつなのでは．\n-->\n\n<h2 id=\"使ったファイル\">使ったファイル</h2>\n<ul>\n<li><p>promscale</p>\n<!--     - https://github.com/timescale/promscale/releases/download/0.7.1/promscale_0.7.1_Linux_x86_64.deb -->\n<ul>\n<li><a href=\"https://github.com/timescale/promscale/releases/download/0.12.1/promscale_0.12.1_Linux_x86_64.deb\">https://github.com/timescale/promscale/releases/download/0.12.1/promscale_0.12.1_Linux_x86_64.deb</a></li>\n</ul>\n</li>\n<li><p>prom-migrator (いい感じに使ってね)</p>\n<!--     - https://github.com/timescale/promscale/releases/download/0.7.1/prom-migrator_0.0.3_Linux_x86_64 -->\n<ul>\n<li><a href=\"https://github.com/timescale/promscale/releases/download/0.12.1/prom-migrator_0.0.4_Linux_x86_64\">https://github.com/timescale/promscale/releases/download/0.12.1/prom-migrator_0.0.4_Linux_x86_64</a></li>\n</ul>\n</li>\n<li><p>promscale</p>\n</li>\n<li><p>prom-migator</p>\n</li>\n</ul>\n<p>その他はdebian標準のやつ(postgresql-13はpg公式リポジトリのやつ)</p>\n<h2 id=\"参考\">参考</h2>\n<ul>\n<li><a href=\"https://docs.timescale.com/install/latest/self-hosted/installation-debian/#setting-up-the-timescaledb-extension\">https://docs.timescale.com/install/latest/self-hosted/installation-debian/#setting-up-the-timescaledb-extension</a></li>\n<li><a href=\"https://docs.timescale.com/timescaledb/latest/how-to-guides/migrate-data/same-db/\">https://docs.timescale.com/timescaledb/latest/how-to-guides/migrate-data/same-db/</a></li>\n</ul>\n","authors":[]},{"slug":"cloudflared","title":"Cloudflared","noRobots":true,"date":1628952877912,"dateUpd":1640679190738,"body":"<h1 id=\"cloudflared\">Cloudflared</h1>\n<h2 id=\"サーバー側\">サーバー側</h2>\n<pre><code># cloudflared tunnel login\n# cloudflared tunnel create hoge\n# cloudflared tunnel route dns hoge hoge.fuga.net # ここらへんは手動でやってもいい\n# cloudflared tunnel route dns hoge hoge-ssh.fuga.net # 上に同じく\n# vim ~/.cloudflared/config.yaml\n# cloudflared service install\n</code></pre>\n<h2 id=\"configyaml\">config.yaml</h2>\n<pre><code class=\"language-yaml\">tunnel: piyo\ncredentials-file: /root/.cloudflared/piyo.json\n\ningress:\n- hostname: hoge.fuga.net\n  service: http://localhost:80\n- hostname: hoge-ssh.fuga.net\n  service: ssh://localhost:22\n- service: http_status:404\n</code></pre>\n<h2 id=\"クライアント側\">クライアント側</h2>\n<pre><code>% cloudflared access ssh-config --hostname hoge-ssh.d3bu.net\n</code></pre>\n<h2 id=\"参考\">参考</h2>\n<ul>\n<li><a href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide\">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide</a></li>\n<li><a href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress\">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/configuration-file/ingress</a></li>\n<li><a href=\"https://zenn.dev/grarich/articles/4fcf016080fbcb\">https://zenn.dev/grarich/articles/4fcf016080fbcb</a></li>\n</ul>\n","authors":[]},{"slug":"servers","title":"部室のサーバーについて","noRobots":true,"body":"<h1 id=\"部室のサーバーについて\">部室のサーバーについて</h1>\n<p>部室のインフラ(笑)</p>\n<p>mDNSは未設定．</p>\n<h2 id=\"メインサーバー\">メインサーバー</h2>\n<ul>\n<li><code>192.168.100.100(SHOZABURO)</code></li>\n<li>CPU : i5-4460 (4C4T)</li>\n<li>メモリ : DDR4 8GB</li>\n<li><code>/</code>，<code>/boot/efi</code> : 2.5インチSATA SSD(256GB)x1，xfs</li>\n<li><code>/data</code> : 3.5インチSATA HDD(1TB)x2，btrfs(Data/Metadata/System全部ミラーリング)</li>\n</ul>\n<h2 id=\"k0sクラスタ\">k0sクラスタ</h2>\n<ul>\n<li><code>192.168.100.150(hiroshi)</code> : rpi 4B (arm64/4C4T/4GB)，32GB microSDカード</li>\n<li><code>192.168.100.128(tako0)</code> : rpi 2B (armhf/4C4T/1GB)，32GB microSDカード</li>\n<li><code>192.168.100.129(tako1)</code> : rpi 2B (armhf/4C4T/1GB)，32GB microSDカード</li>\n<li><code>192.168.100.130(tako2)</code> : rpi 2B (armhf/4C4T/1GB)，32GB microSDカード</li>\n<li><code>192.168.100.131(tako3)</code> : rpi 2B (armhf/4C4T/1GB)，32GB microSDカード</li>\n<li><code>192.168.100.132(tako4)</code> : rpi 2B (armhf/4C4T/1GB)，32GB microSDカード(死亡)</li>\n<li><code>192.168.100.133(tako5)</code> : rpi 2B (armhf/4C4T/1GB)，32GB microSDカード(死にかけ)</li>\n<li><code>192.168.100.134(tako6)</code> : rpi 2B (armhf/4C4T/1GB)，16GB microSDカード(スロット破損)</li>\n</ul>\n","authors":[]},{"slug":"web","title":"運用メモ","author":"山D","noRobots":true,"date":"2021-05-10T00:00:00.000Z","dateUpd":"2021-07-21T00:00:00.000Z","body":"<p><span class=\"WARN\">警告 : ここに書かれている内容は古い</span></p>\n<h1 id=\"運用メモ\">運用メモ</h1>\n<p>マニュアルっぽいことを書こうと思います。</p>\n<h2 id=\"開発環境について\">開発環境について</h2>\n<p>標準的な、NodeでのGatsbyJSの開発環境があれば問題ありません。</p>\n<h2 id=\"記事の追加\">記事の追加</h2>\n<p>方法は2つあります。</p>\n<p>1つ目は、/src/pages以下にjsxファイルを作成する方法です。<br>JSXの構文が理解できて、Reactの機能を使った高度な動きをさせるページを作りたい場合はこっちを使いましょう。<br>しかしこちらの手段を選ぶ人にとっては、ここの説明を読む必要は無いと思われます。</p>\n<p>2つ目は、/src/markdown-pages以下にmarkdownファイルを作成する方法です。<br>文章や画像等からなるシンプルなページを、markdownの(比較的簡単な)記法のみで作成することができます。<br>このページのソース(このページはmarkdownから生成されています！)を見て頂くと分かる通り、ソースファイル自体は先頭に</p>\n<pre><code>---\nslug: &quot;filename&quot;\ntitle: &quot;ページタイトル&quot;\n---\n</code></pre>\n<p>というメタデータを付加されただけの非常に単純な構造になっています。<br><code>slug</code>というのはそのページにアクセスする為のパスで、\nここで指定したパスは実際にビルド結果の(<code>{MarkdownRemark.frontmatter__slug}.jsx</code>起点の)ディレクトリ構造に反映されます。\n(たとえ存在しないサブディレクトリをパスに含めていたとしてもです)<br><code>title</code>は言わずもがな、ページのタイトルです。\nブラウザタブのタイトルや、OGPのページタイトルにも反映されるようになっています。</p>\n<p>実際にここではmarkdownの記法について説明はしませんが、覚えていて損は無いです。</p>\n<h2 id=\"ページのスタイルの修正・改造\">ページのスタイルの修正・改造</h2>\n<p>/src/styles/global/global.scssがグローバルに適用されるSCSSファイルです。\n/src/styles以下の<code>hoge.module.scss</code>にSCSSファイルを置いて、<code>import * as styles from &quot;/path/to/hoge.module.scss&quot;</code>でインポート・適用できます。<br>/src/components以下にJSXで書かれた、ページの部品(コンポーネント)やそのテンプレートとなるファイルがあります。<br><code>/src/pages/\\{MarkdownRemark...</code>のファイルにはmarkdownで記述されたページ用のテンプレートが書かれています。\nJSXの方で使われるLayoutに変更を加えた場合は、このファイルにも同様の変更を適用してください。</p>\n<p>ファイルによっては不可解・非効率的な書き方がされているかもしれませんが、何らかの理由があってその表現に落ち着いているという可能性を忘れないでください。\n明らかに自分が書き直すべきだと感じるのであれば、是非そのコードを実装してください。</p>\n<p>ちなみにCSSのNormalizeには<a href=\"https://krishdevdb.github.io/reseter.css/\">reseter.css</a>を使っています。\nなんかいい感じらしいので。</p>\n<h2 id=\"デプロイ\">デプロイ</h2>\n<p>mainブランチとdevブランチは自動でデプロイされます。\nNetlifyのコンパネから設定を見てください。</p>\n<h2 id=\"共通事項\">共通事項</h2>\n<ul>\n<li>Nav内にリンクが無いページはh1タグでページのタイトルを表示するようにしましょう。</li>\n<li>サイト内のリンクにはLinkタグを使用してください。</li>\n</ul>\n<h2 id=\"メモ\">メモ</h2>\n<ul>\n<li>StaticImageはよくわからんかった。</li>\n<li>OGPは諦めた。react-helmetはJSも読み込んでくれるやつじゃないと使えない。</li>\n<li>文章と単純な画像だけのページはmarkdownで書こう! 楽だし。</li>\n</ul>\n","authors":["山D"]}]}