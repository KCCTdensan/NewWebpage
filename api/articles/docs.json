{"data":[{"slug":"github","title":"githubセットアップガイド","author":"山T","date":"2021-06-15T00:00:00.000Z","body":"<h1 id=\"githubセットアップガイド\">githubセットアップガイド</h1>\n<p>2021年7月10日時点の情報です。\nどうしても動かなかったら山Tまで。</p>\n<h2 id=\"用語解説\">用語解説</h2>\n<p>リポジトリ：gitではコードを保存する場所を指す。\nローカル：主に自分や他の開発者のコンピュータ。\nリモート：ローカルからのの情報を管理するコンピュータ。\nローカルリポジトリ：ローカルにあるリポジトリ。開発者の端末の分だけある。\nリモートリポジトリ：リモートにあるリポジトリ。一つしかない。</p>\n<h3 id=\"git\">git</h3>\n<p>gitとはよく使われている分散型バージョン管理ツールです。\nまた、リモートサーバーを使う事で複数人での開発も可能です。</p>\n<h3 id=\"github\">github</h3>\n<p>githubは先ほど紹介したgitのリモートサーバーで無料で使うことができるツールです。\n自分でリモートサーバを建てるのはめんどくさいですがgithubを利用することで簡単にリモートリポジトリが作れ、\n他の人との共同開発も簡単にできるようになります。</p>\n<p>この記事ではgithubを使った方法について書きます。</p>\n<h2 id=\"実行環境\">実行環境</h2>\n<p>OS: debian 11.0\nシェル: bash</p>\n<h2 id=\"gitのインストール\">gitのインストール</h2>\n<p>gitをインストールします。</p>\n<pre><code class=\"language-bash\">sudo apt-get update\nsudo apt-get install -y git\n</code></pre>\n<p>gitに管理させるディレクトリを作ります。</p>\n<pre><code class=\"language-bash\">mkdir ~/dhirekutori\n</code></pre>\n<p>これでとりあえずパソコン側の準備が終わったのでgithubに移動します。</p>\n<h2 id=\"githubのセットアップと使い方\">githubのセットアップと使い方</h2>\n<p>まずgithubのアカウントを作ります。\n&quot;sign up&quot;のボタンから作ります。\nその後、画面にある&quot;Repositories&quot;のところにある&quot;New&quot;を押してリポジトリを作ります。\nリポジトリを作る画面では&quot;Repository name&quot;というところにはリポジトリの名前を、&quot;Description&quot;のところには説明を入れますが説明はなくても大丈夫です。\nその下の&quot;Public&quot;か&quot;Private&quot;を選ぶところでリポジトリを公開するか(Public)、非公開(Private)にするかを選びます。\nその他は何もさわらなくても大丈夫です。</p>\n<p>入力ができたら&quot;Create repository&quot;を押してリポジトリを作ってください。</p>\n<p>今回は&quot;ripojitori&quot;というリポジトリを作って進めることにします。</p>\n<p>リポジトリができたらQuick setupの画面になると思います。そこのHTTPSのボタンを押してその右側のリンクをコピーしておいてください。</p>\n<h2 id=\"ローカルリポジトリのセットアップclone-init\">ローカルリポジトリのセットアップ(clone, init)</h2>\n<p>&quot;git clone&quot;コマンドでリモートリポジトリをローカルに落とせます。\n試しにやってみると君がクローンしようとしたリポジトリは空だよと怒られます。\nその通りですね（笑）\nただ、共同開発などをする際は元々リモートリポジトリに何か入っていることが多いのでこのコマンドも覚えておいてください。</p>\n<pre><code class=\"language-bash\">git clone &quot;さっきコピーしたリンク&quot;\n&gt; warning: You appear to have cloned an empty repository.\n</code></pre>\n<p>まず何かファイルを作ってみましょう。\nとりあえず&quot;# リポジトリ名&quot;という文字が入ったテキストファイルを作ってみます。\nこれでREADME.mdには&quot;# リポジトリ名&quot;という文字が入っている状態です。(※ちなみにリポジトリ名やディレクトリ名は自分のでつけて良いですが、&quot;README.md&quot;の名前は変えないでください)</p>\n<p>このままではgithubに追加できないのでまず現在のディレクトリ(この解説どうりならさっき作った~/ripojitori)を&quot;git init&quot;コマンドで初期化します。</p>\n<p>下の文では/home/densan/.gitに空のgitリポジトリを初期化したよ〜と言っています。</p>\n<pre><code class=\"language-bash\">echo &quot;# リポジトリ名&quot; &gt; README.md\ngit init\n&gt; Initialized empty Git repository in /home/densan/dhirekutori/.git/\n</code></pre>\n<h2 id=\"ローカルリポジトリのセットアップadd-commit-push\">ローカルリポジトリのセットアップ(add, commit ,push)</h2>\n<p>まず&quot;git add&quot;コマンドでにさっき書いたREADME.mdをgitに管理してもらいます。</p>\n<pre><code class=\"language-bash\">git add README.md\n</code></pre>\n<p>次にgitではコミットということをしなければいけません。\nコミットとはでバックアップをつくるようなものでコミットするとその時点でのファイルの内容が記録されます。\nまた、何度かコミットしている場合過去のコミットに戻ることもできます。\nこれによりバージョン管理ができるのです。</p>\n<p>ターミナルでは&quot;git commit&quot;コマンドとオプションの&quot;-m&quot;を基本的につけます。\n&quot;-m&quot;はコメントをつけるという意味で実際にコミットするときは下のようにしてください。</p>\n<pre><code class=\"language-bash\">git commit -m &quot;コミット名&quot;\n</code></pre>\n<p>すると長い文章がでてくると思いますがおそらくこのように書かれているはずです。\nおまえはだれやねんと...</p>\n<pre><code class=\"language-bash\">&gt; Author identity unknown\n\n*** Please tell me who you are.\n</code></pre>\n<p>なので教えてあげましょう</p>\n<pre><code class=\"language-bash\">git config --global user.name &quot;最初に作ったユーザー名&quot;\ngit config --global user.email &quot;最初に作ったアカウントのメールアドレス&quot;\n</code></pre>\n<p>するとこのような文章が返ってきます。\nコミット成功です！</p>\n<pre><code class=\"language-bash\">&gt; 1 file changed, 1 insertion(+)\n</code></pre>\n<p>では最後にこのコミットをプッシュしましょう。\nプッシュとはリモートリポジトリにコミットを送ることです。\nまずリモートリポジトリを登録しなければなりません。\n&quot;git remote add origin&quot;コマンドでリモートリポジトリを設定します。\n&quot;git push origin master&quot;コマンドオプションの&quot;-u&quot;を初回プッシュのみつけてください。\nこの時にユーザー名とパスワードを聞かれると思うので入力してください。</p>\n<pre><code class=\"language-bash\">git remote add origin https://github.com/&quot;ユーザー名&quot;/&quot;リポジトリ名&quot;.git\ngit push -u origin master\n</code></pre>\n<p>このように返ってくればプッシュは成功です。\ngithub.comでもREADME.mdがあることが確認できると思います。</p>\n<pre><code class=\"language-bash\">&gt; * [new branch]      master -&gt; master\nBranch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.\n</code></pre>\n<h2 id=\"プッシュ2回目以降の使い方\">プッシュ2回目以降の使い方</h2>\n<p>これだけで大丈夫です。</p>\n<pre><code class=\"language-bash\">git add &quot;新しいファイルもしくは変更したファイル&quot;\ngit commit -m &quot;コミット名&quot;\ngit push\n</code></pre>\n<h2 id=\"ローカルリポジトリを更新したいとき\">ローカルリポジトリを更新したいとき</h2>\n<p>他の人と共同開発している場合はリモートリポジトリが更新されているかもしれません。\nその更新をとってくるには&quot;git pull&quot;を使ってください</p>\n<pre><code class=\"language-bash\">git pull https://github.com/&quot;ユーザー名&quot;/&quot;リポジトリ名&quot;.git\n</code></pre>\n<h2 id=\"なぜかうまくいかないとき\">なぜかうまくいかないとき</h2>\n<p>上の文に書いている&quot;&quot;は不要です！実際は入力しないでください。</p>\n"},{"slug":"setup-node","title":"Nodejs環境構築","author":"山D, 山T","date":"2021-06-03T00:00:00.000Z","dateUpd":"2021-07-15T00:00:00.000Z","body":"<h1 id=\"nodejs環境構築\">Nodejs環境構築</h1>\n<p>どうしても動かなかったら山Tまで</p>\n<p>まず，<a href=\"/wsl2-setup\">WSLのセットアップ</a>を完了させておいてください。</p>\n<h2 id=\"必須パッケージのインストール\">必須パッケージのインストール</h2>\n<pre><code>sudo apt-get update\nsudo apt-get install -y nodejs npm\n</code></pre>\n<p>ここで入るものはバージョンが古すぎるのでバージョンを上げる。</p>\n<h2 id=\"安定版のインストール\">安定版のインストール</h2>\n<pre><code>sudo npm install n -g\nsudo n stable\n</code></pre>\n<h2 id=\"古いnodeを消す\">古いnodeを消す</h2>\n<p>ややこしいし、使わないので消しましょう！</p>\n<pre><code>sudo apt purge -y nodejs npm\n</code></pre>\n<h2 id=\"シェルへの再ログインとバージョン確認\">シェルへの再ログインとバージョン確認</h2>\n<pre><code>exec $SHELL -l\nnode -v\n</code></pre>\n<p>これでバージョンが14以降なら大丈夫です！</p>\n<h2 id=\"最新版にしたかったら\">最新版にしたかったら</h2>\n<pre><code>sudo n latest\n</code></pre>\n<p>で最新版にできます。</p>\n<h2 id=\"バージョンの切り替え\">バージョンの切り替え</h2>\n<pre><code>sudo n\n</code></pre>\n<pre><code>ο node/14.17.0\n    node/16.2.0\n\nUse up/down arrow keys to select a version, return key to install, d to delete, q to quit\n</code></pre>\n<p>と打って出てくる上の画面の左端のoを矢印キーで移動させて&#39;enter&#39;で決定、&#39;q&#39;キャンセルできる。ちなみに&#39;d&#39;で選択したバージョンを消せる。</p>\n"},{"slug":"wsl2-setup","title":"WSL爆速セットアップガイド","author":"山D","date":"2021-05-19T00:00:00.000Z","dateUpd":"2022-04-26T00:00:00.000Z","body":"<h1 id=\"wsl爆速セットアップガイド\">WSL爆速セットアップガイド</h1>\n<p>2022年4月時点での最新情報です。\n最新のバージョンのWindowsで使えるかは保証しません。</p>\n<p>元気がある人は<a href=\"https://docs.microsoft.com/ja-jp/windows/wsl/install\">本家の記事(日本語)</a>を読んで自分でセットアップしちゃいましょう。<br>読んでて専門用語わからないよ〜〜となってしまった人もこのページを参考にするとよいかもしれません。</p>\n<h2 id=\"まずはこれを試そう\">まずはこれを試そう</h2>\n<p>最近のWindowsならこれだけで完了します．</p>\n<p>管理者権限のPowerShellまたはコマンドプロンプト(<code>Win + X</code>で開くメニューにある)を開いて，以下のコマンドを実行してください．</p>\n<pre><code>wsl --install\n</code></pre>\n<p>これで完了した人はWSLのインストールは完了です．\n再起動するとUbuntuという名前のアプリケーションが存在するはずなので，起動しましょう．</p>\n<p>起動したら <em>Ubuntuの初期設定</em> の項目まで読み飛ばしてください．(下の方にある)</p>\n<h2 id=\"前提条件old\">前提条件(old)</h2>\n<ul>\n<li>Windows10のバージョンが1903以降<br>→ 最近のPCなら大丈夫ですが，もし不安なら<code>Win</code>キー+<code>Pause</code>キーでWindowsのバージョンを確認できます</li>\n<li>PCの管理者権限を持っている or 管理者のパスワードを知っている<br>→ 自分用のPCであればまず心配しないで良いです</li>\n</ul>\n<h2 id=\"windowsのセットアップ\">Windowsのセットアップ</h2>\n<p>一般的なPCであれば，画面左下に4つ窓マークのスタートメニューがあります。\nこれは普段は左クリックして使うものですが，今回は右クリックします。\nそうすると何かのメニューが出てきて，その中に<code>Windows PowerShell (管理者)</code>という項目が見つかるかと思います。これをクリックしてやりましょう。</p>\n<p>そうするとなにやら青いウィンドウが立ち上がります。\nこれを使って，Windowsに必要な機能の設定をコマンド経由でやっちゃいます。\nしかしコマンド操作とは言っても，やることはコピペだけです。ご安心ください。</p>\n<p>まず，以下のコマンドをコピーします。\nPowerShellのウィンドウではどこでも右クリックでコピーしたテキストを貼り付けることができます。</p>\n<pre><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n</code></pre>\n<p>貼り付け終えたらEnterを押してコマンドを実行してください。エラーが出ずに終了すれば成功です。</p>\n<p>次に，もう一度コマンドをコピペします。</p>\n<pre><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n</code></pre>\n<p>ではEnterを押して実行しましょう。エラーは出ませんでしたか?</p>\n<p>正常にコマンドが終了した場合はPowerShellのウィンドウを閉じてもらって結構です。\n青い画面というものは精神衛生上あまりよろしくありませんね……。</p>\n<p>では，ここまでいい感じに出来たのであれば<strong>必ず</strong>PCを一旦再起動させてください。\nこの再起動は<strong>必須</strong>の手順です。忘れてはいけません。</p>\n<h2 id=\"windowsのセットアップその2\">Windowsのセットアップ(その2)</h2>\n<p>無事再起動を終えたPCは，この先の手順に進みます。</p>\n<p>まず，「Linux カーネル更新プログラム パッケージ」をインストールします。\nPCで<a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\">wsl_update_x64.msi</a>をダウンロードし，インストールしてください。\nこれは比較的すぐ終わります。</p>\n<p>次に，もう一度PowerShellを開きます。(今回は管理者権限無くても大丈夫，スタートを右クリックして開くのが早い)\nそこに，これをコピペ・実行します。</p>\n<pre><code>wsl --set-default-version 2\n</code></pre>\n<p>正常に実行できましたか?</p>\n<h2 id=\"ディストロを選択・ダウンロード\">ディストロを選択・ダウンロード</h2>\n<p>何もわからないのであれば<a href=\"https://www.microsoft.com/store/productid/9NBLGGH4MSV6\">Ubuntu</a>が良いでしょう。<br>MicrosoftStoreで検索・ダウンロードします。</p>\n<h2 id=\"ubuntuの初期設定\">Ubuntuの初期設定</h2>\n<p>さっきの手順でUbuntu以外を選んだ人は雰囲気で頑張ってください。</p>\n<h3 id=\"起動\">起動</h3>\n<p>アプリ一覧のとこからUbuntuってやつを探して起動してください。</p>\n<p>なにやら初期設定のような画面が出てくるのですが，</p>\n<ul>\n<li>ユーザー名は半角の英小文字or数字しか使えない</li>\n<li>パスワードは入力欄に反映されないが，しっかり入力されている</li>\n</ul>\n<p>ということに留意して完了してください。</p>\n<h3 id=\"sudoersの編集\">sudoersの編集</h3>\n<p><code>sudo</code>というコマンドはセキュリティ云々のアレで使う時にいちいちパスワードを聞いてくるのですが，これは自分だけが使用するシステムなのでパスワード入力を省略する設定にしちゃいます。  </p>\n<p>ではまずUbuntuのウィンドウに次のコマンドを入力して実行します。</p>\n<pre><code class=\"language-bash\">sudo visudo\n</code></pre>\n<p>ここでUbuntuの初回起動時に設定したパスワードを聞かれるのですが，いくら入力しても文字が入力されたような気配はありません。\nしかしこれは正常で，実はちゃんと入力できているので普通に入力してEnterを押してください。</p>\n<p>成功するとなにやらテキストエディタのようなものが立ち上がるのですが，</p>\n<pre><code>%sudo   ALL=(ALL:ALL) ALL\n</code></pre>\n<p>の行を</p>\n<pre><code>%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\n</code></pre>\n<p>と書き変えてやってください。</p>\n<ol>\n<li><code>Ctrl</code>+<code>x</code></li>\n<li><code>y</code></li>\n<li><code>Enter</code>\nと順に入力していくと，ここでの変更を保存して終了できます。</li>\n</ol>\n<h2 id=\"システムの更新\">システムの更新</h2>\n<p>これで一応使い物になるUbuntuのシステムが出来上がったのですが，最後にシステムの更新だけやっておきます。\n次のコマンドを実行してください。</p>\n<pre><code>sudo apt update\nsudo apt full-upgrade -y\nsudo apt autoremove -y\n</code></pre>\n<h2 id=\"お便利設定\">お便利設定</h2>\n<p>Ubuntuで以下のコマンドを実行してください。\n<code>ll</code>と<code>la</code>コマンドの追加と，UbuntuのホームディレクトリにWindowsのホームディレクトリのsymlinkを貼ります。</p>\n<pre><code class=\"language-bash\">ln -sf /mnt/c/Users/$(cmd.exe /c &quot;SET /P X=%USERNAME%&lt;NUL&quot; 2&gt;/dev/null) WinHome\necho &#39;alias ll=&quot;ls -l&quot;; alias la=&quot;ls -Al&quot;&#39; &gt;&gt; ~/.bashrc\n. ~/{.bashrc,.profile}\n</code></pre>\n<h2 id=\"終わりに\">終わりに</h2>\n<p>いかがでしたでしょうか。</p>\n<p>Ubuntuは有名な割にけっこうクセが強いディストロなので，暇があるなら他のディストロも触ってみることをおすすめします。</p>\n<p>(Archとかを空いてる実機に入れてみるのも良いかもしれません．</p>\n"},{"slug":"pepper","title":"Pepper開発環境構築","author":"山D","date":"2021-05-13T00:00:00.000Z","dateUpd":"2021-07-03T00:00:00.000Z","body":"<h1 id=\"pepper開発環境構築\">Pepper開発環境構築</h1>\n<p>どうしても動かなかったら山Dまで</p>\n<p>まず，<a href=\"/wsl2-setup\">WSLのセットアップ</a>を完了させておいてください。</p>\n<h3 id=\"必須パッケージのインストール\">必須パッケージのインストール</h3>\n<pre><code class=\"language-bash\">sudo apt update\nsudo apt install -y curl python2 libpython2.7\n</code></pre>\n<h2 id=\"実際に環境を構築する\">実際に環境を構築する</h2>\n<h3 id=\"sdkのダウンロードと展開\">SDKのダウンロードと展開</h3>\n<pre><code class=\"language-bash\">sudo curl -fsSL https://community-static.aldebaran.com/resources/2.5.10/Python%20SDK/pynaoqi-python2.7-2.5.7.1-linux64.tar.gz | sudo tar xz --no-same-owner -C/opt\nsudo ln -s pynaoqi-python2.7-2.5.7.1-linux64 /opt/pynaoqi\nsudo chmod 755 -R /opt/pynaoqi/lib/python2.7/site-packages\n</code></pre>\n<h3 id=\"path通したりその他諸々\">PATH通したりその他諸々</h3>\n<pre><code class=\"language-bash\">echo &#39;export PYTHONPATH=/opt/pynaoqi/lib/python2.7/site-packages:${PYTHONPATH}&#39; &gt;&gt; ~/.profile\n. ~/{.bashrc,.profile}\n</code></pre>\n<h2 id=\"動作確認\">動作確認</h2>\n<pre><code class=\"language-bash\">python2\n</code></pre>\n<p>Pythonのrepl(対話型のインターフェース)が起動します。</p>\n<p>以下を打ってみてください。</p>\n<pre><code class=\"language-python\">import qi\n</code></pre>\n<p>エラーが出ずにプロンプトが戻ってきましたか？<br>戻ってきたなら成功です！\nエラーを吐いたのなら失敗です！</p>\n<h2 id=\"動作確認おまけ\">動作確認(おまけ)</h2>\n<pre><code class=\"language-python2\">import qi\ns = qi.Session()\ns.connect(&quot;tcp://192.168.x.x:9559&quot;)\ntts = s.service(&quot;ALTextToSpeech&quot;)\ntts.say(&quot;布団が吹っ飛んだ&quot;)\n</code></pre>\n"}]}